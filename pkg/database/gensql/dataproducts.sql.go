// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: dataproducts.sql

package gensql

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createDataproduct = `-- name: CreateDataproduct :one
INSERT INTO dataproducts ("name",
                          "description",
                          "group",
                          "teamkatalogen_url",
                          "slug",
                          "team_contact",
                          "team_id")
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
RETURNING id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
`

type CreateDataproductParams struct {
	Name                  string
	Description           sql.NullString
	OwnerGroup            string
	OwnerTeamkatalogenUrl sql.NullString
	Slug                  string
	TeamContact           sql.NullString
	TeamID                sql.NullString
}

func (q *Queries) CreateDataproduct(ctx context.Context, arg CreateDataproductParams) (Dataproduct, error) {
	row := q.db.QueryRowContext(ctx, createDataproduct,
		arg.Name,
		arg.Description,
		arg.OwnerGroup,
		arg.OwnerTeamkatalogenUrl,
		arg.Slug,
		arg.TeamContact,
		arg.TeamID,
	)
	var i Dataproduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Group,
		&i.Created,
		&i.LastModified,
		&i.TsvDocument,
		&i.Slug,
		&i.TeamkatalogenUrl,
		&i.TeamContact,
		&i.TeamID,
	)
	return i, err
}

const dataproductGroupStats = `-- name: DataproductGroupStats :many
SELECT "group",
       count(1) as "count"
FROM "dataproducts"
GROUP BY "group"
ORDER BY "count" DESC
LIMIT $2 OFFSET $1
`

type DataproductGroupStatsParams struct {
	Offs int32
	Lim  int32
}

type DataproductGroupStatsRow struct {
	Group string
	Count int64
}

func (q *Queries) DataproductGroupStats(ctx context.Context, arg DataproductGroupStatsParams) ([]DataproductGroupStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, dataproductGroupStats, arg.Offs, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductGroupStatsRow{}
	for rows.Next() {
		var i DataproductGroupStatsRow
		if err := rows.Scan(&i.Group, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dataproductKeywords = `-- name: DataproductKeywords :many
SELECT keyword::text, count(1) as "count"
FROM (
	SELECT unnest(ds.keywords) as keyword
	FROM dataproducts dp
    INNER JOIN datasets ds ON ds.dataproduct_id = dp.id
) keywords
WHERE true
AND CASE WHEN coalesce(TRIM($1), '') = '' THEN true ELSE keyword ILIKE $1::text || '%' END
GROUP BY keyword
ORDER BY keywords."count" DESC
LIMIT 15
`

type DataproductKeywordsRow struct {
	Keyword string
	Count   int64
}

func (q *Queries) DataproductKeywords(ctx context.Context, keyword string) ([]DataproductKeywordsRow, error) {
	rows, err := q.db.QueryContext(ctx, dataproductKeywords, keyword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductKeywordsRow{}
	for rows.Next() {
		var i DataproductKeywordsRow
		if err := rows.Scan(&i.Keyword, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteDataproduct = `-- name: DeleteDataproduct :exec
DELETE
FROM dataproducts
WHERE id = $1
`

func (q *Queries) DeleteDataproduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDataproduct, id)
	return err
}

const getDataproduct = `-- name: GetDataproduct :one
SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
FROM dataproducts
WHERE id = $1
`

func (q *Queries) GetDataproduct(ctx context.Context, id uuid.UUID) (Dataproduct, error) {
	row := q.db.QueryRowContext(ctx, getDataproduct, id)
	var i Dataproduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Group,
		&i.Created,
		&i.LastModified,
		&i.TsvDocument,
		&i.Slug,
		&i.TeamkatalogenUrl,
		&i.TeamContact,
		&i.TeamID,
	)
	return i, err
}

const getDataproductComplete = `-- name: GetDataproductComplete :many
SELECT 
dsrc.id AS dsrc_id,  
dsrc.created as dsrc_created,
dsrc.last_modified as dsrc_last_modified,
dsrc.expires as dsrc_expires,
dsrc.description as dsrc_description,
dsrc.missing_since as dsrc_missing_since,
dsrc.pii_tags as pii_tags,
dsrc.project_id as project_id,
dsrc.dataset as dataset,
dsrc.table_name as table_name,
dsrc.table_type as table_type,
dsrc.pseudo_columns as pseudo_columns,
dsrc.dataset_id as dsrc_dataset_id,
dsrc.schema as dsrc_schema,
dpds.ds_id, dpds.ds_name, dpds.ds_description, dpds.ds_created, dpds.ds_last_modified, dpds.ds_slug, dpds.keywords, dpds.id, dpds.name, dpds.description, dpds."group", dpds.created, dpds.last_modified, dpds.tsv_document, dpds.slug, dpds.teamkatalogen_url, dpds.team_contact, dpds.team_id,
dm.services,
da.id as da_id,
da.subject as da_subject,
da.granter as da_granter,
da.expires as da_expires,
da.created as da_created,
da.revoked as da_revoked,
da.access_request_id as access_request_id,
mm.database_id as mm_database_id
FROM 
(
	SELECT 
    ds.id AS ds_id, 
    ds.name as ds_name, 
    ds.description as ds_description,
    ds.created as ds_created,
    ds.last_modified as ds_last_modified,
    ds.slug as ds_slug,
    ds.keywords as keywords,
    rdp.id, rdp.name, rdp.description, rdp."group", rdp.created, rdp.last_modified, rdp.tsv_document, rdp.slug, rdp.teamkatalogen_url, rdp.team_contact, rdp.team_id 
    FROM 
	(
		(SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id FROM dataproducts dp WHERE dp.id= $1) rdp 
		LEFT JOIN datasets ds ON ds.dataproduct_id = rdp.id
	)
) dpds 
LEFT JOIN 
    (SELECT dataset_id, project_id, dataset, table_name, schema, last_modified, created, expires, table_type, description, pii_tags, missing_since, id, is_reference, pseudo_columns, deleted FROM datasource_bigquery WHERE is_reference = false) dsrc
ON dpds.ds_id = dsrc.dataset_id 
LEFT JOIN third_party_mappings dm ON dpds.ds_id = dm.dataset_id
LEFT JOIN dataset_access da ON dpds.ds_id = da.dataset_id
LEFT JOIN metabase_metadata mm ON mm.dataset_id = dpds.ds_id AND mm.deleted_at IS NULL
`

type GetDataproductCompleteRow struct {
	DsrcID           uuid.UUID
	DsrcCreated      time.Time
	DsrcLastModified time.Time
	DsrcExpires      sql.NullTime
	DsrcDescription  sql.NullString
	DsrcMissingSince sql.NullTime
	PiiTags          pqtype.NullRawMessage
	ProjectID        string
	Dataset          string
	TableName        string
	TableType        string
	PseudoColumns    []string
	DsrcDatasetID    uuid.UUID
	DsrcSchema       pqtype.NullRawMessage
	DsID             uuid.NullUUID
	DsName           sql.NullString
	DsDescription    sql.NullString
	DsCreated        sql.NullTime
	DsLastModified   sql.NullTime
	DsSlug           sql.NullString
	Keywords         []string
	ID               uuid.UUID
	Name             string
	Description      sql.NullString
	Group            string
	Created          time.Time
	LastModified     time.Time
	TsvDocument      interface{}
	Slug             string
	TeamkatalogenUrl sql.NullString
	TeamContact      sql.NullString
	TeamID           sql.NullString
	Services         []string
	DaID             uuid.NullUUID
	DaSubject        sql.NullString
	DaGranter        sql.NullString
	DaExpires        sql.NullTime
	DaCreated        sql.NullTime
	DaRevoked        sql.NullTime
	AccessRequestID  uuid.NullUUID
	MmDatabaseID     sql.NullInt32
}

func (q *Queries) GetDataproductComplete(ctx context.Context, id uuid.UUID) ([]GetDataproductCompleteRow, error) {
	rows, err := q.db.QueryContext(ctx, getDataproductComplete, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDataproductCompleteRow{}
	for rows.Next() {
		var i GetDataproductCompleteRow
		if err := rows.Scan(
			&i.DsrcID,
			&i.DsrcCreated,
			&i.DsrcLastModified,
			&i.DsrcExpires,
			&i.DsrcDescription,
			&i.DsrcMissingSince,
			&i.PiiTags,
			&i.ProjectID,
			&i.Dataset,
			&i.TableName,
			&i.TableType,
			pq.Array(&i.PseudoColumns),
			&i.DsrcDatasetID,
			&i.DsrcSchema,
			&i.DsID,
			&i.DsName,
			&i.DsDescription,
			&i.DsCreated,
			&i.DsLastModified,
			&i.DsSlug,
			pq.Array(&i.Keywords),
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			&i.Slug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
			pq.Array(&i.Services),
			&i.DaID,
			&i.DaSubject,
			&i.DaGranter,
			&i.DaExpires,
			&i.DaCreated,
			&i.DaRevoked,
			&i.AccessRequestID,
			&i.MmDatabaseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataproducts = `-- name: GetDataproducts :many
SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
FROM dataproducts
ORDER BY last_modified DESC
LIMIT $2 OFFSET $1
`

type GetDataproductsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetDataproducts(ctx context.Context, arg GetDataproductsParams) ([]Dataproduct, error) {
	rows, err := q.db.QueryContext(ctx, getDataproducts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataproduct{}
	for rows.Next() {
		var i Dataproduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			&i.Slug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataproductsByGroups = `-- name: GetDataproductsByGroups :many
SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
FROM dataproducts
WHERE "group" = ANY ($1::text[])
ORDER BY last_modified DESC
`

func (q *Queries) GetDataproductsByGroups(ctx context.Context, groups []string) ([]Dataproduct, error) {
	rows, err := q.db.QueryContext(ctx, getDataproductsByGroups, pq.Array(groups))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataproduct{}
	for rows.Next() {
		var i Dataproduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			&i.Slug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataproductsByIDs = `-- name: GetDataproductsByIDs :many
SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
FROM dataproducts
WHERE id = ANY ($1::uuid[])
ORDER BY last_modified DESC
`

func (q *Queries) GetDataproductsByIDs(ctx context.Context, ids []uuid.UUID) ([]Dataproduct, error) {
	rows, err := q.db.QueryContext(ctx, getDataproductsByIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataproduct{}
	for rows.Next() {
		var i Dataproduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			&i.Slug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataproductsByProductArea = `-- name: GetDataproductsByProductArea :many
SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
FROM dataproducts
WHERE team_id = ANY($1::text[])
ORDER BY created DESC
`

func (q *Queries) GetDataproductsByProductArea(ctx context.Context, teamID []string) ([]Dataproduct, error) {
	rows, err := q.db.QueryContext(ctx, getDataproductsByProductArea, pq.Array(teamID))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataproduct{}
	for rows.Next() {
		var i Dataproduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			&i.Slug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataproductsByTeam = `-- name: GetDataproductsByTeam :many
SELECT id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
FROM dataproducts
WHERE team_id = $1
ORDER BY created DESC
`

func (q *Queries) GetDataproductsByTeam(ctx context.Context, teamID sql.NullString) ([]Dataproduct, error) {
	rows, err := q.db.QueryContext(ctx, getDataproductsByTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataproduct{}
	for rows.Next() {
		var i Dataproduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Group,
			&i.Created,
			&i.LastModified,
			&i.TsvDocument,
			&i.Slug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataproduct = `-- name: UpdateDataproduct :one
UPDATE dataproducts
SET "name"              = $1,
    "description"       = $2,
    "slug"              = $3,
    "teamkatalogen_url" = $4,
    "team_contact"      = $5,
    "team_id"           = $6
WHERE id = $7
RETURNING id, name, description, "group", created, last_modified, tsv_document, slug, teamkatalogen_url, team_contact, team_id
`

type UpdateDataproductParams struct {
	Name                  string
	Description           sql.NullString
	Slug                  string
	OwnerTeamkatalogenUrl sql.NullString
	TeamContact           sql.NullString
	TeamID                sql.NullString
	ID                    uuid.UUID
}

func (q *Queries) UpdateDataproduct(ctx context.Context, arg UpdateDataproductParams) (Dataproduct, error) {
	row := q.db.QueryRowContext(ctx, updateDataproduct,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.OwnerTeamkatalogenUrl,
		arg.TeamContact,
		arg.TeamID,
		arg.ID,
	)
	var i Dataproduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Group,
		&i.Created,
		&i.LastModified,
		&i.TsvDocument,
		&i.Slug,
		&i.TeamkatalogenUrl,
		&i.TeamContact,
		&i.TeamID,
	)
	return i, err
}
