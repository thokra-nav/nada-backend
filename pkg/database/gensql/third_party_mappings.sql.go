// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: third_party_mappings.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getDatasetMappings = `-- name: GetDatasetMappings :one
SELECT services, dataset_id
FROM third_party_mappings
WHERE "dataset_id" = $1
`

func (q *Queries) GetDatasetMappings(ctx context.Context, datasetID uuid.UUID) (ThirdPartyMapping, error) {
	row := q.db.QueryRowContext(ctx, getDatasetMappings, datasetID)
	var i ThirdPartyMapping
	err := row.Scan(pq.Array(&i.Services), &i.DatasetID)
	return i, err
}

const getDatasetsByMapping = `-- name: GetDatasetsByMapping :many
SELECT dataproduct_id, dp_name, dp_description, dp_group, dp_created, dp_last_modified, dp_slug, teamkatalogen_url, team_contact, team_id, bq_id, bq_created, bq_last_modified, bq_expires, bq_description, bq_missing_since, pii_tags, bq_project, bq_dataset, bq_table_name, bq_table_type, pseudo_columns, bq_schema, ds_dp_id, ds_id, ds_name, ds_description, ds_created, ds_last_modified, ds_slug, ds_keywords, mapping_services, access_id, access_subject, access_granter, access_expires, access_created, access_revoked, access_request_id, mb_database_id FROM dataproduct_complete_view
WHERE $1::TEXT = ANY("mapping_services")
LIMIT $3 OFFSET $2
`

type GetDatasetsByMappingParams struct {
	Service string
	Offs    int32
	Lim     int32
}

func (q *Queries) GetDatasetsByMapping(ctx context.Context, arg GetDatasetsByMappingParams) ([]DataproductCompleteView, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetsByMapping, arg.Service, arg.Offs, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductCompleteView{}
	for rows.Next() {
		var i DataproductCompleteView
		if err := rows.Scan(
			&i.DataproductID,
			&i.DpName,
			&i.DpDescription,
			&i.DpGroup,
			&i.DpCreated,
			&i.DpLastModified,
			&i.DpSlug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
			&i.BqID,
			&i.BqCreated,
			&i.BqLastModified,
			&i.BqExpires,
			&i.BqDescription,
			&i.BqMissingSince,
			&i.PiiTags,
			&i.BqProject,
			&i.BqDataset,
			&i.BqTableName,
			&i.BqTableType,
			pq.Array(&i.PseudoColumns),
			&i.BqSchema,
			&i.DsDpID,
			&i.DsID,
			&i.DsName,
			&i.DsDescription,
			&i.DsCreated,
			&i.DsLastModified,
			&i.DsSlug,
			pq.Array(&i.DsKeywords),
			pq.Array(&i.MappingServices),
			&i.AccessID,
			&i.AccessSubject,
			&i.AccessGranter,
			&i.AccessExpires,
			&i.AccessCreated,
			&i.AccessRevoked,
			&i.AccessRequestID,
			&i.MbDatabaseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mapDataset = `-- name: MapDataset :exec
INSERT INTO third_party_mappings (
    "dataset_id",
    "services"
) VALUES (
    $1,
    $2
) ON CONFLICT ("dataset_id") DO UPDATE SET
    "services" = EXCLUDED.services
`

type MapDatasetParams struct {
	DatasetID uuid.UUID
	Services  []string
}

func (q *Queries) MapDataset(ctx context.Context, arg MapDatasetParams) error {
	_, err := q.db.ExecContext(ctx, mapDataset, arg.DatasetID, pq.Array(arg.Services))
	return err
}
